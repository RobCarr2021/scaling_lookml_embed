import { IJoinConfig } from "@/app/components/Joins/types";
import { ColumnInfo } from "./route";

function mapBQDataType(bqDataType: string): string {
  switch (bqDataType.toLowerCase()) {
    case "string":
      return "string";
    case "int64":
    case "integer":
    case "float64":
    case "numeric":
    case "bignumeric":
      return "number";
    case "bool":
    case "boolean":
      return "yesno";
    case "date":
      return "date";
    case "time":
      return "string";
    case "datetime":
    case "timestamp":
      return "time";
    case "bytes":
    case "geography":
    case "json":
    case "array":
    case "struct":
      return "string";
    default:
      return "string";
  }
}

const snakeCase = (str: string) => {
  return str
    .replace(/\s+/g, "_")
    .replace(/([A-Z])/g, "_$1")
    .toLowerCase()
    .replace(/__+/g, "_");
};

export function generateLookML({
  tableName,
  columnInfo,
  project_id,
  dataset_id,
  looker_user_id,
  view_label,
  join_config,
}: {
  tableName: string;
  columnInfo: ColumnInfo[];
  project_id: string;
  dataset_id: string;
  looker_user_id: string;
  view_label: string;
  join_config: IJoinConfig;
}): string {
  const [model_name, explore_name] = join_config.explore_id.split("::");
  let lookml = `# autogenerated file
include: "../models/${model_name}.model"
access_grant: customer_upload_${tableName} {
  user_attribute: id
  allowed_values: ["${looker_user_id}"]
}
explore: +${explore_name} {
  join: ${tableName} {
    sql_on: ${join_config.joins
      .map(
        (join) => `\${${join.from_field}} = \${${tableName}.${join.to_field}}`
      )
      .join(" AND ")} ;;
    required_access_grants: [customer_upload_${tableName}]
    relationship: many_to_one
    type: ${join_config.type}
  }
}
view: ${tableName} {
  label: "${view_label}"
  sql_table_name: \`${project_id}.${dataset_id}.${tableName}\` ;;
`;

  // Add dimensions for each column
  columnInfo.forEach((column) => {
    const lookmlType = mapBQDataType(column.data_type);
    lookml += `  dimension: ${snakeCase(column.column_name)} {
    type: ${lookmlType}
    sql: \${TABLE}.\`${column.column_name}\` ;;
  }
`;
  });

  lookml += "}\n";
  return lookml;
}
